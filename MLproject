name: readmission-prediction
conda_env: conda.yaml

entry_points:

  decision_tree:
    parameters:
      max_depth: {type: int, default: 10}
      min_samples_split: {type: int, default: 2}
    command: "python DecsionTree.py --max_depth {max_depth} --min_samples_split {min_samples_split}"
  
  logistic_regression:
    parameters:
      c: {type: float, default: 1.0}
      solver: {type: str, default: "lbfgs"}
    command: "python logisticregression.py --c {c} --solver {solver}"

  random_forest:
    parameters:
      n_estimators: {type: int, default: 100}
      max_depth: {type: int, default: 10}
      random_state: {type: int, default: 42}
    command: "python RandomForest.py --n_estimators {n_estimators} --max_depth {max_depth} --random_state {random_state}"

  gradient_boosting:
    parameters:
      n_estimators: {type: int, default: 100}
      learning_rate: {type: float, default: 0.1}
      max_depth: {type: int, default: 3}
    command: "python Gradient_Boosting.py --n_estimators {n_estimators} --learning_rate {learning_rate} --max_depth {max_depth}"

  xgboost:
    parameters:
      n_estimators: {type: int, default: 350}
      learning_rate: {type: float, default: 0.1}
      max_depth: {type: int, default: 15}
    command: "python xgboost_script.py --n_estimators {n_estimators} --learning_rate {learning_rate} --max_depth {max_depth}"

  knn:
    parameters:
      n_neighbors: {type: int, default: 5}
      weights: {type: str, default: 'uniform'}
      algorithm: {type: str, default: 'auto'}
    command: "python KNN.py --n_neighbors {n_neighbors} --weights {weights} --algorithm {algorithm}"
